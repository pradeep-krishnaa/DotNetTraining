Week5 Assessment - EventEasePro

Layers - API , Core , Application , Infrastructure , Test , MVC

EventEase.Core 

1./Entities/Event.cs
public class Event
{
    public int Id { get; set; }
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public DateTime Date { get; set; } = DateTime.UtcNow;
    public string Location { get; set; } = string.Empty;
}

2. /Entities/User.cs
public class User
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;

}

3./Entities/Registration.cs
public class Registration
{
    public int Id { get; set; }
    public int UserId { get; set; }
    public User User { get; set; } = new User();
    public int EventId { get; set; }
    public Event Event { get; set; } = new Event();
    public DateTime RegistrationDate { get; set; } = DateTime.UtcNow;

}

4.Craeted Request and Response DTOs for all 3 entities

5.Interfaces folder - IRepository.cs
public interface IRepository<T> where T : class
{
    Task<List<T>> GetAllAsync();
    Task<T > GetByIdAsync(int id);
    Task AddAsync(T entity);
    Task UpdateAsync(T entity);
    Task DeleteAsync(int id);

}
IEVentRepo , IUserRepo , IRegistrationRepo implements IRepository.cs

IUserService , IEVentService , IRegistrationService.cs 



Exceptions/InvalidRegistration.cs
namespace EventEase.Core.Exceptions
{
    public class InvalidRegistration : Exception
    {
        public InvalidRegistration(string Messsage) : base(Messsage)
        {

        }
    }
}

Exceptions/NotFoundException
namespace EventEase.Core.Exceptions
{
    public class NotFoundException : Exception
    {
        public NotFoundException(string Messsage) : base(Messsage)
        {

        }
    }
}

Infrastrcuture Layer

Added EFCore Pacakages nd Connected Database .
Repositories/UserRepo.cs
public class UserRepository : IUserRepository

{
    //private readonly List<User> _users = new List<User>();
    //public int _nextId = 1;
    private readonly AppDbContext _context;

    public UserRepository(AppDbContext context)
    {
        _context = context;
    }
    
    public async Task<List<User>> GetAllAsync()
    {
        return await _context.Users.ToListAsync();

    }

    public async Task<User> GetByIdAsync(int id)
    {
        return await _context.Users.FindAsync(id);
    }

    public async Task AddAsync(User user)
    {
        _context.Users.Add(user);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateAsync(User user)
    {
        _context.Users.Update(user);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteAsync(int id)
    {
        _context.Users.Remove(_context.Users.Find(id));
        await _context.SaveChangesAsync();
    }
}

EventRepo.cs

public class EventRepository : IEventRepository
{
    

    private readonly AppDbContext _context;

    public EventRepository(AppDbContext context)
    {
        _context = context;
    }
    public async Task<List<Event>> GetAllAsync()
    {
        return await _context.Event.ToListAsync();

    }

    public async Task<Event> GetByIdAsync(int id)
    {
        return await _context.Event.FindAsync(id);
    }

    public async Task AddAsync(Event user)
    {
        _context.Event.Add(user);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateAsync(Event user)
    {
        _context.Event.Update(user);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteAsync(int id)
    {
        _context.Event.Remove(_context.Event.Find(id));
        await _context.SaveChangesAsync();
    }
}

RegistrationRepo.cs

public class RegistrationRepository : IRegistrationRepository
{
    

    private readonly AppDbContext _context;

    public RegistrationRepository(AppDbContext context)
    {
        _context = context;
    }
    public async Task<List<Registration>> GetAllAsync()
    {
        return await _context.Registrations.ToListAsync();

    }

    public async Task<Registration> GetByIdAsync(int id)
    {
        return await _context.Registrations.FindAsync(id);
    }

    public async Task AddAsync(Registration user)
    {
        _context.Registrations.Add(user);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateAsync(Registration user)
    {
        _context.Registrations.Update(user);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteAsync(int id)
    {
        _context.Registrations.Remove(_context.Registrations.Find(id));
        await _context.SaveChangesAsync();
    }

    public async Task<List<Registration>> GetRegistrationsByEventIdAsync(int id)
    {
        List<Registration> registrations = new List<Registration>();
        var registrationss = await _context.Registrations.ToListAsync();
        foreach (var registration in registrationss)
        {
            if (registration.EventId == id)
            {
                registrations.Add(registration);
            }
        }
        return registrations;
    }
}

Application Layer

Mapping/MappingProfile.cs - use dautomapper for event  , user , regsistartion and DTOs
Services/

UserService.cs

using EventEase.Core.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using EventEase.Core.DTOs;
using EventEase.Core.Entities;
using EventEase.Core.Exceptions;

namespace EventEase.Application.Services
{
    public class UserService : IUserService
    {
        private readonly IUserRepository _userRepository;
        private readonly IMapper _mapper;
        //public int _nextUserId = 1; 
        public UserService(IUserRepository userRepository, IMapper mapper)
        {
            _userRepository = userRepository ?? throw new ArgumentNullException(nameof(userRepository));
            _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        }
        public async Task CreateUserAsync(UserRequestDTO userRequestDTO)
        {
            if (userRequestDTO == null) throw new ArgumentNullException(nameof(userRequestDTO));
            var user = _mapper.Map<User>(userRequestDTO);
            await _userRepository.AddAsync(user);
        }
        public async Task UpdateUserAsync(int userId, UserRequestDTO userRequestDTO)
        {
            if (userRequestDTO == null) throw new ArgumentNullException(nameof(userRequestDTO));
            var existingUser = await _userRepository.GetByIdAsync(userId);
            if (existingUser == null) throw new NotFoundException($"User with ID {userId} not found");
            _mapper.Map(userRequestDTO, existingUser);
            await _userRepository.UpdateAsync(existingUser);
        }
        public async Task DeleteUserAsync(int userId)
        {
            var user = await _userRepository.GetByIdAsync(userId);
            if (user == null) throw new NotFoundException($"User with ID {userId} not found");
            await _userRepository.DeleteAsync(userId);
        }
        public async Task<UserResponseDTO> GetUserByIdAsync(int userId)
        {
            var user = await _userRepository.GetByIdAsync(userId);
            if (user == null) throw new NotFoundException($"User with ID {userId} not found");
            return _mapper.Map<UserResponseDTO>(user);
        }
        public async Task<List<UserResponseDTO>> GetAllUsersAsync()
        {
            var users = await _userRepository.GetAllAsync();
            return  _mapper.Map<List<UserResponseDTO>>(users);

        }
    }
}

EVentService.cs
using EventEase.Core.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using EventEase.Core.DTOs;
using EventEase.Core.Entities;
using EventEase.Core.Exceptions;

namespace EventEase.Application.Services
{
    public class UserService : IUserService
    {
        private readonly IUserRepository _userRepository;
        private readonly IMapper _mapper;
        //public int _nextUserId = 1; 
        public UserService(IUserRepository userRepository, IMapper mapper)
        {
            _userRepository = userRepository ?? throw new ArgumentNullException(nameof(userRepository));
            _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        }
        public async Task CreateUserAsync(UserRequestDTO userRequestDTO)
        {
            if (userRequestDTO == null) throw new ArgumentNullException(nameof(userRequestDTO));
            var user = _mapper.Map<User>(userRequestDTO);
            await _userRepository.AddAsync(user);
        }
        public async Task UpdateUserAsync(int userId, UserRequestDTO userRequestDTO)
        {
            if (userRequestDTO == null) throw new ArgumentNullException(nameof(userRequestDTO));
            var existingUser = await _userRepository.GetByIdAsync(userId);
            if (existingUser == null) throw new NotFoundException($"User with ID {userId} not found");
            _mapper.Map(userRequestDTO, existingUser);
            await _userRepository.UpdateAsync(existingUser);
        }
        public async Task DeleteUserAsync(int userId)
        {
            var user = await _userRepository.GetByIdAsync(userId);
            if (user == null) throw new NotFoundException($"User with ID {userId} not found");
            await _userRepository.DeleteAsync(userId);
        }
        public async Task<UserResponseDTO> GetUserByIdAsync(int userId)
        {
            var user = await _userRepository.GetByIdAsync(userId);
            if (user == null) throw new NotFoundException($"User with ID {userId} not found");
            return _mapper.Map<UserResponseDTO>(user);
        }
        public async Task<List<UserResponseDTO>> GetAllUsersAsync()
        {
            var users = await _userRepository.GetAllAsync();
            return  _mapper.Map<List<UserResponseDTO>>(users);

        }
    }
}

RegistrationSrvice.cs
using AutoMapper;
using EventEase.Core.DTOs;
using EventEase.Core.Entities;
using EventEase.Core.Exceptions;
using EventEase.Core.Interfaces;
using EventEase.Infrastructure.Data;
using RegistrationEase.Core.Interfaces;

namespace EventEase.Application.Services
{
    public class RegistrationService : IRegistrationService
    {
        private readonly IRegistrationRepository _registrationRepository;
        private readonly AppDbContext _context;
        private readonly IMapper _mapper;

        public RegistrationService(IRegistrationRepository registrationRepository, IMapper mapper, AppDbContext context)
        {
            _registrationRepository = registrationRepository ?? throw new ArgumentNullException(nameof(registrationRepository));
            _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
            _context = context;
        }

        public async Task RegisterUserForEventAsync(RegistrationRequestDTO registrationsRequestDTO)
        {
            
            if (_context.Users.Find(registrationsRequestDTO.UserId) == null  || _context.Event.Find(registrationsRequestDTO.EventId) ==null)
                throw new InvalidRegistration("Invalid User id and event id");

            var registration = _mapper.Map<Registration>(registrationsRequestDTO);
            await _registrationRepository.AddAsync(registration);
        }

        public async Task UpdateRegistrationAsync(int registrationId, RegistrationRequestDTO registrationsRequestDTO)
        {
            if (registrationsRequestDTO == null)
                throw new ArgumentNullException(nameof(registrationsRequestDTO));

            var existingRegistration = await _registrationRepository.GetByIdAsync(registrationId);
            if (existingRegistration == null)
                throw new NotFoundException($"Registration with ID {registrationId} not found");

            _mapper.Map(registrationsRequestDTO, existingRegistration);
            await _registrationRepository.UpdateAsync(existingRegistration);
        }

        public async Task DeleteRegistrationAsync(int registrationId)
        {
            var existingRegistration = await _registrationRepository.GetByIdAsync(registrationId);
            if (existingRegistration == null)
                throw new NotFoundException($"Registration with ID {registrationId} not found");

            await _registrationRepository.DeleteAsync(registrationId);
        }

        public async Task<RegistrationResponseDTO> GetRegistrationByIdAsync(int registrationId)
        {
            var registration = await _registrationRepository.GetByIdAsync(registrationId);
            if (registration == null)
                throw new NotFoundException($"Registration with ID {registrationId} not found");

            return _mapper.Map<RegistrationResponseDTO>(registration);
        }

        public async Task<List<RegistrationResponseDTO>> GetAllRegistrationsAsync()
        {
            var registrations = await _registrationRepository.GetAllAsync();
            return _mapper.Map<List<RegistrationResponseDTO>>(registrations);
        }

        public async Task<List<RegistrationResponseDTO>> GetRegistrationsByEventIdAsync(int id)
        {
            var registrations = await _registrationRepository.GetRegistrationsByEventIdAsync(id);
            return _mapper.Map<List<RegistrationResponseDTO>>(registrations);
        }
    }
}


API/Conrollers/

USerController.cs

using EventEase.Core.DTOs;
using EventEase.Core.Interfaces;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace EventEase.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly IUserService _userService;
        public UserController(IUserService userService)
        {
            _userService = userService;
        }
        

        // ✅ Create User
        [HttpPost]
        public async Task<IActionResult> CreateUser(UserRequestDTO userRequestDTO)
        {
            await _userService.CreateUserAsync(userRequestDTO);
            return Ok("User created successfully");
        }

        // ✅ Seed and Get All Users
        [HttpGet]
        public async Task<IActionResult> GetAllUsers()
        {
            
            

            var users = await _userService.GetAllUsersAsync();
            return Ok(users);
        }

        // ✅ Get User by Id
        [HttpGet("{id}")]
        public async Task<IActionResult> GetUser(int id)
        {
            var user = await _userService.GetUserByIdAsync(id);
            if (user == null)
            {
                return NotFound($"User with ID {id} not found.");
            }
            return Ok(user);
        }

        // ✅ Update User
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateUser(int id, UserRequestDTO userRequestDTO)
        {
            try
            {
                await _userService.UpdateUserAsync(id, userRequestDTO);
                return Ok("User updated successfully");
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(ex.Message);
            }
        }

        // ✅ Delete User
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteUser(int id)
        {
            try
            {
                await _userService.DeleteUserAsync(id);
                return Ok("User deleted successfully");
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(ex.Message);
            }
        }


    }
}

EventController.cs
using EventEase.Core.DTOs;
using EventEase.Core.Interfaces;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace EventEase.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EventController : ControllerBase
    {
        private readonly IEventService _eventService;

        public EventController(IEventService eventService)
        {
            _eventService = eventService ?? throw new ArgumentNullException(nameof(eventService));
        }

        // ✅ Create Event
        [HttpPost]
        public async Task<IActionResult> CreateEvent(EventRequestDTO eventRequestDTO)
        {
            await _eventService.CreateEventAsync(eventRequestDTO);
            return Ok("Event created successfully");
        }

        // ✅ Get All Events
        [HttpGet]
        public async Task<IActionResult> GetAllEvents()
        {
            var events = await _eventService.GetAllEventsAsync();
            return Ok(events);
        }

        // ✅ Get Event by Id
        [HttpGet("{id}")]
        public async Task<IActionResult> GetEvent(int id)
        {
            var ev = await _eventService.GetEventByIdAsync(id);
            if (ev == null)
                return StatusCode(404 , new { Message = $"Event with ID {id} not found." });

            return Ok(ev);
        }

        // ✅ Update Event
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateEvent(int id, EventRequestDTO eventRequestDTO)
        {
            try
            {
                await _eventService.UpdateEventAsync(id, eventRequestDTO);
                return Ok("Event updated successfully");
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(ex.Message);
            }
        }

        // ✅ Delete Event
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteEvent(int id)
        {
            try
            {
                await _eventService.DeleteEventAsync(id);
                return Ok("Event deleted successfully");
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(ex.Message);
            }
        }

    }
}


RegsitartioController.cs
using EventEase.Core.DTOs;
using EventEase.Core.Interfaces;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using RegistrationEase.Core.Interfaces;

namespace EventEase.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RegistrationController : ControllerBase
    {
        private readonly IRegistrationService _registrationService;

        public RegistrationController(IRegistrationService registrationService)
        {
            _registrationService = registrationService ?? throw new ArgumentNullException(nameof(registrationService));
        }

        // ✅ Register User for Event
        [HttpPost]
        public async Task<IActionResult> RegisterUser(RegistrationRequestDTO registrationRequestDTO)
        {
            await _registrationService.RegisterUserForEventAsync(registrationRequestDTO);
            return Ok("User registered successfully");
        }

        // ✅ Get All Registrations
        [HttpGet]
        public async Task<IActionResult> GetAllRegistrations()
        {
            var regs = await _registrationService.GetAllRegistrationsAsync();
            return Ok(regs);
        }

        // ✅ Get Registration by Id
        [HttpGet("{id}")]
        public async Task<IActionResult> GetRegistration(int id)
        {
            var reg = await _registrationService.GetRegistrationByIdAsync(id);
            if (reg == null)
                return NotFound($"Registration with ID {id} not found.");

            return Ok(reg);
        }

        // ✅ Get Registrations by Event Id
        [HttpGet("event/{eventId}")]
        public async Task<IActionResult> GetRegistrationsByEvent(int eventId)
        {
            var regs = await _registrationService.GetRegistrationsByEventIdAsync(eventId);
            return Ok(regs);
        }

        // ✅ Update Registration
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateRegistration(int id, RegistrationRequestDTO registrationRequestDTO)
        {
            try
            {
                await _registrationService.UpdateRegistrationAsync(id, registrationRequestDTO);
                return Ok("Registration updated successfully");
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(ex.Message);
            }
        }

        // ✅ Delete Registration
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteRegistration(int id)
        {
            try
            {
                await _registrationService.DeleteRegistrationAsync(id);
                return Ok("Registration deleted successfully");
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(ex.Message);
            }
        }


    }
}


Middleware/GlobalExceptionHandler.cs

using EventEase.Core.DTOs;
using EventEase.Core.Exceptions;

namespace EventEase.API.Middleware
{
    public class GlobalExceptionHandler
    {
        private readonly ILogger<GlobalExceptionHandler> _logger;
        private readonly IWebHostEnvironment webHostEnvironment;
        private readonly RequestDelegate requestDelegate;

        public GlobalExceptionHandler(ILogger<GlobalExceptionHandler> logger, IWebHostEnvironment webHostEnvironment, RequestDelegate requestDelegate)
        {
            this._logger = logger;
            this.webHostEnvironment = webHostEnvironment;
            this.requestDelegate = requestDelegate;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            try
            {
                await requestDelegate(context);
            }
            catch (Exception ex)
            {
                HandleExceptionAsync(context, ex);
            }
        }

        private async Task HandleExceptionAsync(HttpContext context, Exception ex)
        {
            var correlationId = context.TraceIdentifier;
            context.Response.ContentType = "application/json";

            int statusCode;
            string message;
            string? details;

            switch (ex)
            {
                case NotFoundException nf:
                    statusCode = StatusCodes.Status404NotFound;
                    message = nf.Message;
                    details = webHostEnvironment.IsDevelopment() ? nf.StackTrace : null;
                    break;
                case InvalidRegistration iR:
                    statusCode = StatusCodes.Status400BadRequest;
                    message = iR.Message;
                    details = webHostEnvironment.IsDevelopment() ? iR.StackTrace : null;
                    break;

                default:
                    statusCode = StatusCodes.Status500InternalServerError;
                    message = ex.Message;
                    details = webHostEnvironment.IsDevelopment() ? ex.StackTrace : null;
                    break;
            }

            var error = new ErrorResponse
            {
                StatusCode = statusCode,
                Message = message,
                Details = details,
                CorrelationId = correlationId
            };

            //logging the exception

            _logger.LogError(
                ex,
                "Unhandled Exception for {Method} {Path}. CorrelationId:{CorrelationId}",
                context.Request.Method,
                context.Request.Path,
                correlationId);

            context.Response.StatusCode = statusCode;
            var json = System.Text.Json.JsonSerializer.Serialize(error);
            await context.Response.WriteAsync(json);





        }


    }
}


MVC Layer 
Models/EventViewModel.cs
public class EventViewModel
{
    public int Id { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public DateTime Date { get; set; }
    public string Location { get; set; }
}

EventView/index.cshtml
@model IEnumerable<EventEase.MVC.Models.EventViewModel>

@{
    ViewData["Title"] = "Events";
}

<h2>Event List</h2>

<p>
    <a asp-action="Create" class="btn btn-primary">Create New Event</a>
</p>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Id</th>
            <th>Title</th>
            <th>Description</th>
            <th>Date</th>
            <th>Location</th>
            <th>Actions</th> <!-- ✅ Details / Edit / Delete -->
        </tr>
    </thead>
    <tbody>
        @if (Model == null || !Model.Any())
        {
            <tr><td colspan="6">No Events Found</td></tr>
        }
        else
        {
            @foreach (var ev in Model)
            {
                <tr>
                    <td>@ev.Id</td>
                    <td>@ev.Title</td>
                    <td>@ev.Description</td>
                    <td>@ev.Date.ToString("yyyy-MM-dd")</td>
                    <td>@ev.Location</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@ev.Id" class="btn btn-info btn-sm">Details</a>
                        <a asp-action="Edit" asp-route-id="@ev.Id" class="btn btn-warning btn-sm">Edit</a>
                        <a asp-action="Delete" asp-route-id="@ev.Id" class="btn btn-danger btn-sm">Delete</a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


details.cshtml
@model EventEase.MVC.Models.EventViewModel

@{
    ViewData["Title"] = "Event Details";
}

<h2>Event Details - Id: @Model.Id</h2>

@if (Model == null)
{
    <p class="text-danger">Event not found.</p>
}
else
{
    <dl class="row">
        <dt class="col-sm-2">Id</dt>
        <dd class="col-sm-10">@Model.Id</dd>

        <dt class="col-sm-2">Title</dt>
        <dd class="col-sm-10">@Model.Title</dd>

        <dt class="col-sm-2">Description</dt>
        <dd class="col-sm-10">@Model.Description</dd>

        <dt class="col-sm-2">Date</dt>
        <dd class="col-sm-10">@Model.Date.ToString("yyyy-MM-dd")</dd>

        <dt class="col-sm-2">Location</dt>
        <dd class="col-sm-10">@Model.Location</dd>
    </dl>
}

<a asp-controller="EventView" asp-action="Index" class="btn btn-primary mt-3">Back to List</a>

EventViewController.cs
using EventEase.MVC.Models;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using System.Net.Http.Json;

namespace EventEase.MVC.Controllers
{
    public class EventViewController : Controller
    {
        private readonly HttpClient _httpClient;

        public EventViewController(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient("EventEaseAPI");
        }

        // GET: EventView
        public async Task<IActionResult> Index()
        {
            var events = await _httpClient.GetFromJsonAsync<IEnumerable<EventViewModel>>("Event");
            return View(events);
        }

        // GET: EventView/Details/5
        public async Task<IActionResult> Details(int id)
        {
            var ev = await _httpClient.GetFromJsonAsync<EventViewModel>($"Event/{id}");
            if (ev == null)
            {
                return NotFound();
            }
            return View(ev);
        }
    }
}

Tests

using AutoMapper;
using EventEase.Application.Services;
using EventEase.Core.DTOs;
using EventEase.Core.Entities;
using EventEase.Core.Exceptions;
using EventEase.Core.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Moq;
using EventEase.Core.Interfaces;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;

namespace EventEase.Test
{
    public class RegistrationServiceTests
    {
        private readonly Mock<IRegistrationRepository> _mockRepo;
        private readonly IMapper _mapper;
        private readonly DbContextOptions<EventEase.Infrastructure.Data.AppDbContext> _dbOptions;

        public RegistrationServiceTests()
        {
            _mockRepo = new Mock<IRegistrationRepository>();

            // AutoMapper config
            var config = new MapperConfiguration(cfg =>
            {
                cfg.CreateMap<RegistrationRequestDTO, Registration>();
                cfg.CreateMap<Registration, RegistrationResponseDTO>();
            });
            _mapper = config.CreateMapper();

            // InMemory EF for testing DbContext dependency
            _dbOptions = new DbContextOptionsBuilder<EventEase.Infrastructure.Data.AppDbContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;
        }

        [Fact]
        public async Task RegisterUserForEventAsync_Should_Add_Registration_When_Valid()
        {
            // Arrange
            using var context = new EventEase.Infrastructure.Data.AppDbContext(_dbOptions);
            context.Users.Add(new User { Id = 1, Name = "TestUser" });
            context.Event.Add(new Event { Id = 1, Title = "Test Event" });
            context.SaveChanges();

            var service = new RegistrationService(_mockRepo.Object, _mapper, context);

            var dto = new RegistrationRequestDTO { UserId = 1, EventId = 1 };

            // Act
            await service.RegisterUserForEventAsync(dto);

            // Assert
            _mockRepo.Verify(r => r.AddAsync(It.IsAny<Registration>()), Times.Once);
        }

        [Fact]
        public async Task RegisterUserForEventAsync_Should_Throw_InvalidRegistration_When_UserOrEvent_NotFound()
        {
            // Arrange
            using var context = new EventEase.Infrastructure.Data.AppDbContext(_dbOptions);
            var service = new RegistrationService(_mockRepo.Object, _mapper, context);

            var dto = new RegistrationRequestDTO { UserId = 99, EventId = 99 };

            // Act & Assert
            await Assert.ThrowsAsync<InvalidRegistration>(() => service.RegisterUserForEventAsync(dto));
        }

        [Fact]
        public async Task GetRegistrationsByEventIdAsync_Should_Return_List()
        {
            // Arrange
            var registrations = new List<Registration>
            {
                new Registration { Id = 1, UserId = 1, EventId = 1 },
                new Registration { Id = 2, UserId = 2, EventId = 1 }
            };

            _mockRepo.Setup(r => r.GetRegistrationsByEventIdAsync(1))
                     .ReturnsAsync(registrations);

            var service = new RegistrationService(_mockRepo.Object, _mapper, new EventEase.Infrastructure.Data.AppDbContext(_dbOptions));

            // Act
            var result = await service.GetRegistrationsByEventIdAsync(1);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(2, result.Count);
        }
    }
}





