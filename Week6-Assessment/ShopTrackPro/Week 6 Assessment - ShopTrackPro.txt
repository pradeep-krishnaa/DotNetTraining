Week 6 Assessment - ShopTrackPro

Entities

public class Order
{
    public int Id { get; set; }                // Primary Key
    public int UserId { get; set; }            // FK → User
    public DateTime OrderDate { get; set; }
    public string Status { get; set; } = null!;

    // Navigation
    public User User { get; set; } = null!;
    public ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
}

public class OrderItem
{
    public int Id { get; set; }                // Primary Key
    public int OrderId { get; set; }           // FK → Order
    public int ProductId { get; set; }         // FK → Product
    public int Quantity { get; set; }

    // Navigation
    public Order Order { get; set; } = null!;
    public Product Product { get; set; } = null!;
}

public class Product
{
    public int Id { get; set; }                // Primary Key
    public string Name { get; set; } = null!;
    public string Description { get; set; } = null!;
    public decimal Price { get; set; }
    public string Category { get; set; } = null!;

    // Relationships
    public ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
}

public class User
{
    public int Id { get; set; }               
    public string UserName { get; set; } = null!;
    public string Email { get; set; } = null!;
    public string Role { get; set; } = null!;
    public string? PasswordHash { get; set; } = null!;

    // Relationships
    public ICollection<Order> Orders { get; set; } = new List<Order>();
}

Created DTOs for all entities - 
OrderRequestDTO.cs , OrderResponseDTO.cs
OrderItemRequestDTO.cs , OrderItemResponseDTO.cs
ProductRequestDTO.cs , ProductResponseDTO.cs
UserRequestDTO.cs , UserResponseDTO.cs
LoginRequest.cs , RegisterRequest.cs

Interfaces for services , controllers and IRepository was created 

Repositories
using Microsoft.EntityFrameworkCore;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using ShopTrackPro.Infrastructure.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopTrackPro.Infrastructure.Repositories
{
    public class OrderItemRepository : IOrderItemRepository
    {
        private readonly AppDbContext _context;

        public OrderItemRepository(AppDbContext context)
        {
            _context = context;
        }

        public async Task<List<OrderItem>> GetAllAsync()
        {
            return await _context.OrderItems.ToListAsync();
        }

        public async Task<OrderItem?> GetByIdAsync(int id)
        {
            return await _context.OrderItems.FindAsync(id);
        }

        public async Task AddAsync(OrderItem OrderItem)
        {
            _context.OrderItems.Add(OrderItem);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(OrderItem OrderItem)
        {
            _context.OrderItems.Update(OrderItem);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var OrderItem = await _context.OrderItems.FindAsync(id);
            if (OrderItem != null)
            {
                _context.OrderItems.Remove(OrderItem);
                await _context.SaveChangesAsync();
            }
        }


    }
}

using Microsoft.EntityFrameworkCore;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using ShopTrackPro.Infrastructure.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopTrackPro.Infrastructure.Repositories
{
    public class OrderRepository : IOrderRepository
    {
        private readonly AppDbContext _context;

        public OrderRepository(AppDbContext context)
        {
            _context = context;
        }

        public async Task<List<Order>> GetAllAsync()
        {
            return await _context.Orders.ToListAsync();
        }

        public async Task<Order?> GetByIdAsync(int id)
        {
            return await _context.Orders.FindAsync(id);
        }

        public async Task AddAsync(Order Order)
        {
            _context.Orders.Add(Order);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(Order Order)
        {
            _context.Orders.Update(Order);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var Order = await _context.Orders.FindAsync(id);
            if (Order != null)
            {
                _context.Orders.Remove(Order);
                await _context.SaveChangesAsync();
            }
        }


    }
}

using Microsoft.EntityFrameworkCore;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using ShopTrackPro.Infrastructure.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopTrackPro.Infrastructure.Repositories
{
    public class ProductRepository : IProductRepository
    {
        private readonly AppDbContext _context;

        public ProductRepository(AppDbContext context)
        {
            _context = context;
        }

        public async Task<List<Product>> GetAllAsync()
        {
            return await _context.Products.ToListAsync();
        }

        public async Task<Product?> GetByIdAsync(int id)
        {
            return await _context.Products.FindAsync(id);
        }

        public async Task AddAsync(Product Product)
        {
            _context.Products.Add(Product);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(Product Product)
        {
            _context.Products.Update(Product);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var Product = await _context.Products.FindAsync(id);
            if (Product != null)
            {
                _context.Products.Remove(Product);
                await _context.SaveChangesAsync();
            }
        }

        
    }
}

using Microsoft.EntityFrameworkCore;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using ShopTrackPro.Infrastructure.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopTrackPro.Infrastructure.Repositories
{
    public class UserRepository : IUserRepository
    {
        private readonly AppDbContext _context;

        public UserRepository(AppDbContext context)
        {
            _context = context;
        }

        public async Task<List<User>> GetAllAsync()
        {
            return await _context.Users.ToListAsync();
        }

        public async Task<User?> GetByIdAsync(int id)
        {
            return await _context.Users.FindAsync(id);
        }

        public async Task AddAsync(User User)
        {
            _context.Users.Add(User);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(User User)
        {
            _context.Users.Update(User);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var User = await _context.Users.FindAsync(id);
            if (User != null)
            {
                _context.Users.Remove(User);
                await _context.SaveChangesAsync();
            }
        }

        
    }
}

Services
using AutoMapper;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopTrackPro.Application.Services
{
    public class OrderItemService : IOrderItemService
    {
        private readonly IOrderItemRepository _repository;
        private readonly IMapper _mapper;

        public OrderItemService(IOrderItemRepository repository, IMapper mapper)
        {
            _repository = repository;
            _mapper = mapper;
        }

        public async Task<List<OrderItemResponseDTO>> GetAllOrderItemsAsync()
        {
            var items = await _repository.GetAllAsync();
            return _mapper.Map<List<OrderItemResponseDTO>>(items);
        }

        public async Task<OrderItemResponseDTO?> GetOrderItemByIdAsync(int id)
        {
            var item = await _repository.GetByIdAsync(id);
            return _mapper.Map<OrderItemResponseDTO?>(item);
        }

        public async Task AddOrderItemAsync(OrderItemRequestDTO dto)
        {
            var item = _mapper.Map<OrderItem>(dto);
            await _repository.AddAsync(item);
        }

        public async Task UpdateOrderItemAsync(int id, OrderItemRequestDTO dto)
        {
            var item = await _repository.GetByIdAsync(id);
            if (item == null) return;

            _mapper.Map(dto, item);
            await _repository.UpdateAsync(item);
        }

        public async Task DeleteOrderItemAsync(int id) =>
            await _repository.DeleteAsync(id);
    }
}

using AutoMapper;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopTrackPro.Application.Services
{
    public class OrderService : IOrderService
    {
        private readonly IOrderRepository _repository;
        private readonly IMapper _mapper;

        public OrderService(IOrderRepository repository, IMapper mapper)
        {
            _repository = repository;
            _mapper = mapper;
        }

        public async Task<List<OrderResponseDTO>> GetAllOrdersAsync()
        {
            var orders = await _repository.GetAllAsync();
            return _mapper.Map<List<OrderResponseDTO>>(orders);
        }

        public async Task<OrderResponseDTO?> GetOrderByIdAsync(int id)
        {
            var order = await _repository.GetByIdAsync(id);
            return _mapper.Map<OrderResponseDTO?>(order);
        }

        public async Task AddOrderAsync(OrderRequestDTO dto)
        {
            var order = new Order
            {
                UserId = dto.UserId,
                OrderDate = DateTime.UtcNow,
                Status = "Pending",
                OrderItems = dto.Items.Select(i => new OrderItem
                {
                    ProductId = i.ProductId,
                    Quantity = i.Quantity
                }).ToList()
            };

            await _repository.AddAsync(order);
        }

        public async Task UpdateOrderAsync(int id, OrderRequestDTO dto)
        {
            var order = await _repository.GetByIdAsync(id);
            if (order == null) return;

            // reset items
            order.OrderItems.Clear();
            foreach (var i in dto.Items)
            {
                order.OrderItems.Add(new OrderItem
                {
                    ProductId = i.ProductId,
                    Quantity = i.Quantity
                });
            }
            order.Status = "Updated";

            await _repository.UpdateAsync(order);
        }

        public async Task DeleteOrderAsync(int id) =>
            await _repository.DeleteAsync(id);
    }
}

using AutoMapper;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopTrackPro.Application.Services
{
    public class ProductService : IProductService
    {
        private readonly IProductRepository _repository;
        private readonly IMapper _mapper;

        public ProductService(IProductRepository repository, IMapper mapper)
        {
            _repository = repository;
            _mapper = mapper;
        }

        public async Task<List<ProductResponseDTO>> GetAllProductsAsync()
        {
            var products = await _repository.GetAllAsync();
            return _mapper.Map<List<ProductResponseDTO>>(products);
        }

        public async Task<ProductResponseDTO?> GetProductByIdAsync(int id)
        {
            var product = await _repository.GetByIdAsync(id);
            return _mapper.Map<ProductResponseDTO?>(product);
        }

        public async Task AddProductAsync(ProductRequestDTO dto)
        {
            var product = _mapper.Map<Product>(dto);
            await _repository.AddAsync(product);
        }

        public async Task UpdateProductAsync(int id, ProductRequestDTO dto)
        {
            var product = await _repository.GetByIdAsync(id);
            if (product == null) return;

            _mapper.Map(dto, product);
            await _repository.UpdateAsync(product);
        }

        public async Task DeleteProductAsync(int id) =>
            await _repository.DeleteAsync(id);
    }
}

using AutoMapper;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopTrackPro.Application.Services
{
    public class UserService : IUserService
    {
        private readonly IUserRepository _repository;
        private readonly IMapper _mapper;

        public UserService(IUserRepository repository, IMapper mapper)
        {
            _repository = repository;
            _mapper = mapper;
        }

        public async Task<List<UserResponseDTO>> GetAllUsersAsync()
        {
            var users = await _repository.GetAllAsync();
            return _mapper.Map<List<UserResponseDTO>>(users);
        }

        public async Task<UserResponseDTO?> GetUserByIdAsync(int id)
        {
            var user = await _repository.GetByIdAsync(id);
            return _mapper.Map<UserResponseDTO?>(user);
        }

        public async Task AddUserAsync(UserRequestDTO dto)
        {
            var user = _mapper.Map<User>(dto);
            //user.PasswordHash = HashPassword(dto.Password);
            await _repository.AddAsync(user);
        }

        public async Task UpdateUserAsync(int id, UserRequestDTO dto)
        {
            var user = await _repository.GetByIdAsync(id);
            if (user == null) return;

            user.UserName = dto.Username;
            user.Email = dto.Email;
            user.Role = dto.Role;
            //user.PasswordHash = HashPassword(dto.Password);

            await _repository.UpdateAsync(user);
        }

        public async Task DeleteUserAsync(int id) =>
            await _repository.DeleteAsync(id);

        //private string HashPassword(string password)
        //{
        //    using var sha = SHA256.Create();
        //    var bytes = sha.ComputeHash(Encoding.UTF8.GetBytes(password));
        //    return Convert.ToBase64String(bytes);
        //}
    }
}

AutoMapper
using AutoMapper;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopTrackPro.Application.Mapping
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            // Product
            CreateMap<Product, ProductResponseDTO>().ReverseMap();
            CreateMap<ProductRequestDTO, Product>();

            // User
            CreateMap<User, UserResponseDTO>().ReverseMap();
            CreateMap<UserRequestDTO, User>()
                .ForMember(dest => dest.PasswordHash, opt => opt.Ignore()); // handled in service

            // OrderItem
            CreateMap<OrderItem, OrderItemResponseDTO>()
                .ForMember(dest => dest.ProductName, opt => opt.MapFrom(src => src.Product.Name))
                .ForMember(dest => dest.Price, opt => opt.MapFrom(src => src.Product.Price));
            CreateMap<OrderItemRequestDTO, OrderItem>();

            // Order
            CreateMap<Order, OrderResponseDTO>()
                .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => src.User.UserName));
            CreateMap<OrderRequestDTO, Order>();
        }
    }
}

Controllers

using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Infrastructure.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using ShopTrackPro.Core;

namespace Hostel.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly IConfiguration _configuration;
        private readonly AppDbContext _context;  // ✅ use DbContext
        private readonly PasswordHasher<User> _passwordHasher = new();

        public AuthController(IConfiguration configuration, AppDbContext context)
        {
            _configuration = configuration;
            _context = context;
        }

        // ✅ POST: api/auth/register
        [HttpPost("register")]
        public async Task<IActionResult> Register(RegisterRequest request)
        {
            if (await _context.Users.AnyAsync(u => u.UserName == request.UserName))
                return BadRequest(new { Message = "Username already exists" });

            var user = new User
            {
                UserName = request.UserName,
                Role = request.Role ?? "Student",
                Email = request.Email,
                
            };

            user.PasswordHash = _passwordHasher.HashPassword(user, request.Password);

            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "User created successfully" });
        }

        // ✅ POST: api/auth/login
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginRequest request)
        {
            var user = await _context.Users.FirstOrDefaultAsync(u => u.UserName == request.UserName);
            if (user == null)
                return Unauthorized(new { Message = "Invalid username or password" });

            // Verify password
            var result = _passwordHasher.VerifyHashedPassword(user, user.PasswordHash, request.Password);
            if (result == PasswordVerificationResult.Failed)
                return Unauthorized(new { Message = "Invalid username or password" });

            var token = GenerateJwtToken(user);
            return Ok(new { Token = token });
        }

        // ✅ JWT generator
        private string GenerateJwtToken(User user)
        {
            var key = _configuration["Jwt:Key"];
            var issuer = _configuration["Jwt:Issuer"];
            var audience = _configuration["Jwt:Audience"];
            var expirationMinutes = Convert.ToDouble(_configuration["Jwt:ExpirationInMinutes"]);

            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(key));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.UserName),
                new Claim(ClaimTypes.Role, user.Role ?? "Resident"),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            };

            var token = new JwtSecurityToken(
                issuer: issuer,
                audience: audience,
                claims: claims,
                expires: DateTime.UtcNow.AddMinutes(expirationMinutes),
                signingCredentials: credentials);

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}

using Microsoft.AspNetCore.Mvc;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Application.Services;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Interfaces;

namespace ShopTrackPro.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class OrdersController : ControllerBase
    {
        private readonly IOrderService _service;

        public OrdersController(IOrderService service)
        {
            _service = service;
        }

        [HttpGet]
        public async Task<ActionResult<List<OrderResponseDTO>>> GetAll()
        {
            var orders = await _service.GetAllOrdersAsync();
            return Ok(orders);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<OrderResponseDTO>> GetById(int id)
        {
            var order = await _service.GetOrderByIdAsync(id);
            if (order == null) return NotFound();
            return Ok(order);
        }

        [HttpPost]
        public async Task<ActionResult> Create(OrderRequestDTO dto)
        {
            await _service.AddOrderAsync(dto);
            return StatusCode(201);
        }

        [HttpPut("{id}")]
        public async Task<ActionResult> Update(int id, OrderRequestDTO dto)
        {
            var existing = await _service.GetOrderByIdAsync(id);
            if (existing == null) return NotFound();

            await _service.UpdateOrderAsync(id, dto);
            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult> Delete(int id)
        {
            var existing = await _service.GetOrderByIdAsync(id);
            if (existing == null) return NotFound();

            await _service.DeleteOrderAsync(id);
            return NoContent();
        }
    }
}
using Microsoft.AspNetCore.Mvc;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Application.Services;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Interfaces;

namespace ShopTrackPro.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class OrderItemsController : ControllerBase
    {
        private readonly IOrderItemService _service;

        public OrderItemsController(IOrderItemService service)
        {
            _service = service;
        }

        [HttpGet]
        public async Task<ActionResult<List<OrderItemResponseDTO>>> GetAll()
        {
            var items = await _service.GetAllOrderItemsAsync();
            return Ok(items);
        }

        

        
    }
}


using Microsoft.AspNetCore.Mvc;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Application.Services;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Interfaces;
using Microsoft.AspNetCore.Authorization;

namespace ShopTrackPro.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    //[Authorize]
    public class ProductsController : ControllerBase
    {
        private readonly IProductService _service;

        public ProductsController(IProductService service)
        {
            _service = service;
        }

        [HttpGet]
        [Authorize(Roles = "Admin")]
        public async Task<ActionResult<List<ProductResponseDTO>>> GetAll()
        {
            var products = await _service.GetAllProductsAsync();
            return Ok(products);
        }

        [HttpGet("{id}")]
        [Authorize(Policy = "RequireAdmin")]
        public async Task<ActionResult<ProductResponseDTO>> GetById(int id)
        {
            var product = await _service.GetProductByIdAsync(id);
            if (product == null) return NotFound();
            return Ok(product);
        }

        [HttpPost]
        public async Task<ActionResult> Create(ProductRequestDTO dto)
        {
            await _service.AddProductAsync(dto);
            return StatusCode(201); // Created
        }

        [HttpPut("{id}")]
        public async Task<ActionResult> Update(int id, ProductRequestDTO dto)
        {
            var existing = await _service.GetProductByIdAsync(id);
            if (existing == null) return NotFound();

            await _service.UpdateProductAsync(id, dto);
            return NoContent(); // 204
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult> Delete(int id)
        {
            var existing = await _service.GetProductByIdAsync(id);
            if (existing == null) return NotFound();

            await _service.DeleteProductAsync(id);
            return NoContent();
        }
    }
}

using Microsoft.AspNetCore.Mvc;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Application.Services;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Interfaces;

namespace ShopTrackPro.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class UsersController : ControllerBase
    {
        private readonly IUserService _service;

        public UsersController(IUserService service)
        {
            _service = service;
        }

        [HttpGet]
        public async Task<ActionResult<List<UserResponseDTO>>> GetAll()
        {
            var users = await _service.GetAllUsersAsync();
            return Ok(users);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<UserResponseDTO>> GetById(int id)
        {
            var user = await _service.GetUserByIdAsync(id);
            if (user == null) return NotFound();
            return Ok(user);
        }

        [HttpPost]
        public async Task<ActionResult> Create(UserRequestDTO dto)
        {
            await _service.AddUserAsync(dto);
            return StatusCode(201);
        }

        [HttpPut("{id}")]
        public async Task<ActionResult> Update(int id, UserRequestDTO dto)
        {
            var existing = await _service.GetUserByIdAsync(id);
            if (existing == null) return NotFound();

            await _service.UpdateUserAsync(id, dto);
            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult> Delete(int id)
        {
            var existing = await _service.GetUserByIdAsync(id);
            if (existing == null) return NotFound();

            await _service.DeleteUserAsync(id);
            return NoContent();
        }
    }
}

program.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using ShopTrackPro.Application.Mapping;
using ShopTrackPro.Application.Services;
using ShopTrackPro.Core.Interfaces;
using ShopTrackPro.Infrastructure.Data;
using ShopTrackPro.Infrastructure.Repositories;
using System;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();

// ✅ Swagger configuration
builder.Services.AddSwaggerGen(c =>
{
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Enter 'Bearer' followed by a space and your JWT.\r\nExample: \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\""
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});

// ✅ Add Authorization policies
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("RequireAdmin", policy => policy.RequireRole("Admin"));
    options.AddPolicy("RequireStaff", policy => policy.RequireRole("Staff"));
});

// ✅ Register Repositories and Services
builder.Services.AddScoped<IProductRepository, ProductRepository>();
builder.Services.AddScoped<IProductService, ProductService>();
builder.Services.AddScoped<IOrderRepository, OrderRepository>();
builder.Services.AddScoped<IOrderService, OrderService>();
builder.Services.AddScoped<IUserRepository, UserRepository>();
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<IOrderItemRepository, OrderItemRepository>();
builder.Services.AddScoped<IOrderItemService, OrderItemService>();

// ✅ AutoMapper
builder.Services.AddAutoMapper(typeof(MappingProfile));

// ✅ DbContext
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// ✅ Authentication
builder.Services.AddAuthentication("Bearer")
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new Microsoft.IdentityModel.Tokens.SymmetricSecurityKey(
                System.Text.Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
        };
    });

// ✅ Add services to the container
builder.Services.AddControllersWithViews();

// ✅ Register IHttpClientFactory
builder.Services.AddHttpClient("ShopTrackProAPI", client =>
{
    client.BaseAddress = new Uri("https://localhost:7140/api/");
    // Change port to match your API's launch URL
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthentication();
app.UseGlobalExceptionHandler();
app.UseAuthorization();
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.MapControllers();

app.Run();


Tests
ProductServiceTests.cs

using AutoMapper;
using Moq;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Infrastructure.Repositories;
using ShopTrackPro.Application.Services;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using Xunit;

namespace ShopTrackPro.Tests.Services
{
    public class ProductServiceTests
    {
        private readonly Mock<IProductRepository> _mockRepo;
        private readonly Mock<IMapper> _mockMapper;
        private readonly ProductService _service;

        public ProductServiceTests()
        {
            _mockRepo = new Mock<IProductRepository>();
            _mockMapper = new Mock<IMapper>();
            _service = new ProductService(_mockRepo.Object, _mockMapper.Object);
        }

        [Fact]
        public async Task GetAllProductsAsync_ShouldReturnMappedProducts()
        {
            // Arrange
            var products = new List<Product> { new Product { Id = 1, Name = "Laptop" } };
            var productDtos = new List<ProductResponseDTO> { new ProductResponseDTO { Id = 1, Name = "Laptop" } };

            _mockRepo.Setup(r => r.GetAllAsync()).ReturnsAsync(products);
            _mockMapper.Setup(m => m.Map<List<ProductResponseDTO>>(products)).Returns(productDtos);

            // Act
            var result = await _service.GetAllProductsAsync();

            // Assert
            Assert.Single(result);
            Assert.Equal("Laptop", result[0].Name);
            _mockRepo.Verify(r => r.GetAllAsync(), Times.Once);
        }

        [Fact]
        public async Task AddProductAsync_ShouldCallRepositoryAdd()
        {
            // Arrange
            var request = new ProductRequestDTO { Name = "Phone", Description = "Smartphone", Price = 500, Category = "Electronics" };
            var product = new Product { Id = 2, Name = "Phone" };

            _mockMapper.Setup(m => m.Map<Product>(request)).Returns(product);

            // Act
            await _service.AddProductAsync(request);

            // Assert
            _mockRepo.Verify(r => r.AddAsync(It.Is<Product>(p => p.Name == "Phone")), Times.Once);
        }
    }
}

OrderServiceTests.cs
using AutoMapper;
using Moq;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Application.Services;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using Xunit;

namespace ShopTrackPro.Tests.Services
{
    public class OrderServiceTests
    {
        private readonly Mock<IOrderRepository> _mockRepo;
        private readonly Mock<IMapper> _mockMapper;
        private readonly OrderService _service;

        public OrderServiceTests()
        {
            _mockRepo = new Mock<IOrderRepository>();
            _mockMapper = new Mock<IMapper>();
            _service = new OrderService(_mockRepo.Object, _mockMapper.Object);
        }

        [Fact]
        public async Task GetOrderByIdAsync_ShouldReturnMappedOrder_WhenOrderExists()
        {
            // Arrange
            var order = new Order { Id = 1, Status = "Pending", User = new User { UserName = "John" } };
            var orderDto = new OrderResponseDTO { Id = 1, Status = "Pending", UserName = "John" };

            _mockRepo.Setup(r => r.GetByIdAsync(1)).ReturnsAsync(order);
            _mockMapper.Setup(m => m.Map<OrderResponseDTO?>(order)).Returns(orderDto);

            // Act
            var result = await _service.GetOrderByIdAsync(1);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("Pending", result.Status);
            _mockRepo.Verify(r => r.GetByIdAsync(1), Times.Once);
        }

        [Fact]
        public async Task AddOrderAsync_ShouldSaveOrderWithItems()
        {
            // Arrange
            var request = new OrderRequestDTO
            {
                UserId = 1,
                Items = new List<OrderItemRequestDTO>
                {
                    new OrderItemRequestDTO { ProductId = 10, Quantity = 2 }
                }
            };

            // Act
            await _service.AddOrderAsync(request);

            // Assert
            _mockRepo.Verify(r => r.AddAsync(It.Is<Order>(o =>
                o.UserId == 1 &&
                o.OrderItems.Count == 1 &&
                o.OrderItems.First().ProductId == 10
            )), Times.Once);
        }

        [Fact]
        public async Task DeleteOrderAsync_ShouldCallRepositoryDelete()
        {
            // Arrange
            int orderId = 5;

            // Act
            await _service.DeleteOrderAsync(orderId);

            // Assert
            _mockRepo.Verify(r => r.DeleteAsync(orderId), Times.Once);
        }
    }
}


MVC 

ProductViewController.cs

using AutoMapper;
using Moq;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Application.Services;
using ShopTrackPro.Core.DTOs;
using ShopTrackPro.Core.Entities;
using ShopTrackPro.Core.Interfaces;
using Xunit;

namespace ShopTrackPro.Tests.Services
{
    public class OrderServiceTests
    {
        private readonly Mock<IOrderRepository> _mockRepo;
        private readonly Mock<IMapper> _mockMapper;
        private readonly OrderService _service;

        public OrderServiceTests()
        {
            _mockRepo = new Mock<IOrderRepository>();
            _mockMapper = new Mock<IMapper>();
            _service = new OrderService(_mockRepo.Object, _mockMapper.Object);
        }

        [Fact]
        public async Task GetOrderByIdAsync_ShouldReturnMappedOrder_WhenOrderExists()
        {
            // Arrange
            var order = new Order { Id = 1, Status = "Pending", User = new User { UserName = "John" } };
            var orderDto = new OrderResponseDTO { Id = 1, Status = "Pending", UserName = "John" };

            _mockRepo.Setup(r => r.GetByIdAsync(1)).ReturnsAsync(order);
            _mockMapper.Setup(m => m.Map<OrderResponseDTO?>(order)).Returns(orderDto);

            // Act
            var result = await _service.GetOrderByIdAsync(1);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("Pending", result.Status);
            _mockRepo.Verify(r => r.GetByIdAsync(1), Times.Once);
        }

        [Fact]
        public async Task AddOrderAsync_ShouldSaveOrderWithItems()
        {
            // Arrange
            var request = new OrderRequestDTO
            {
                UserId = 1,
                Items = new List<OrderItemRequestDTO>
                {
                    new OrderItemRequestDTO { ProductId = 10, Quantity = 2 }
                }
            };

            // Act
            await _service.AddOrderAsync(request);

            // Assert
            _mockRepo.Verify(r => r.AddAsync(It.Is<Order>(o =>
                o.UserId == 1 &&
                o.OrderItems.Count == 1 &&
                o.OrderItems.First().ProductId == 10
            )), Times.Once);
        }

        [Fact]
        public async Task DeleteOrderAsync_ShouldCallRepositoryDelete()
        {
            // Arrange
            int orderId = 5;

            // Act
            await _service.DeleteOrderAsync(orderId);

            // Assert
            _mockRepo.Verify(r => r.DeleteAsync(orderId), Times.Once);
        }
    }
}

ProductViewModel.cs

namespace ShopTrackPro.MVC.Models
{
    public class ProductViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null!;
        public decimal Price { get; set; }
        public string Category { get; set; } = null!;
    }
}

index.cshtml
@model IEnumerable<ShopTrackPro.Core.DTOs.ProductResponseDTO>

@{
    ViewData["Title"] = "Products";
}

<h2>Products</h2>

<p>
    <a class="btn btn-primary" asp-action="Create">Create New</a>
</p>

<table class="table table-striped">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(m => m.First().Id)</th>
            <th>@Html.DisplayNameFor(m => m.First().Name)</th>
            <th>@Html.DisplayNameFor(m => m.First().Description)</th>
            <th>@Html.DisplayNameFor(m => m.First().Price)</th>
            <th>@Html.DisplayNameFor(m => m.First().Category)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>@item.Price</td>
                <td>@item.Category</td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm">Details</a> |
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm">Edit</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@model ShopTrackPro.Core.DTOs.ProductResponseDTO

@{
    ViewData["Title"] = "Create Product";
}

<h2>Create Product</h2>

<form asp-action="Create" method="post">
    <div class="mb-3">
        <label asp-for="Name" class="form-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Description" class="form-label"></label>
        <textarea asp-for="Description" class="form-control"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Price" class="form-label"></label>
        <input asp-for="Price" class="form-control" />
        <span asp-validation-for="Price" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Category" class="form-label"></label>
        <input asp-for="Category" class="form-control" />
        <span asp-validation-for="Category" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-success">Create</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>


@model ShopTrackPro.Core.DTOs.ProductResponseDTO

@{
    ViewData["Title"] = "Delete Product";
}

<h2>Delete Product</h2>

<h4>Are you sure you want to delete this product?</h4>
<div class="card p-3 mb-3">
    <dl class="row">
        <dt class="col-sm-3">Name</dt>
        <dd class="col-sm-9">@Model.Name</dd>

        <dt class="col-sm-3">Description</dt>
        <dd class="col-sm-9">@Model.Description</dd>

        <dt class="col-sm-3">Price</dt>
        <dd class="col-sm-9">@Model.Price</dd>

        <dt class="col-sm-3">Category</dt>
        <dd class="col-sm-9">@Model.Category</dd>
    </dl>
</div>

<form asp-action="DeleteConfirmed" method="post">
    <input type="hidden" asp-for="Id" />
    <button type="submit" class="btn btn-danger">Delete</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

@model ShopTrackPro.Core.DTOs.ProductResponseDTO

@{
    ViewData["Title"] = "Product Details";
}

<h2>Product Details</h2>

<div class="card p-3">
    <dl class="row">
        <dt class="col-sm-3">ID</dt>
        <dd class="col-sm-9">@Model.Id</dd>

        <dt class="col-sm-3">Name</dt>
        <dd class="col-sm-9">@Model.Name</dd>

        <dt class="col-sm-3">Description</dt>
        <dd class="col-sm-9">@Model.Description</dd>

        <dt class="col-sm-3">Price</dt>
        <dd class="col-sm-9">@Model.Price</dd>

        <dt class="col-sm-3">Category</dt>
        <dd class="col-sm-9">@Model.Category</dd>
    </dl>
</div>

<a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Edit</a>
<a asp-action="Index" class="btn btn-secondary">Back to List</a>


@model ShopTrackPro.Core.DTOs.ProductResponseDTO

@{
    ViewData["Title"] = "Edit Product";
}

<h2>Edit Product</h2>

<form asp-action="Edit" method="post">
    <input type="hidden" asp-for="Id" />

    <div class="mb-3">
        <label asp-for="Name" class="form-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Description" class="form-label"></label>
        <textarea asp-for="Description" class="form-control"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Price" class="form-label"></label>
        <input asp-for="Price" class="form-control" />
        <span asp-validation-for="Price" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Category" class="form-label"></label>
        <input asp-for="Category" class="form-control" />
        <span asp-validation-for="Category" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-warning">Save Changes</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

Exceptions

using System.Net;
using System.Text.Json;

namespace ShopTrackPro.API.Middleware
{
    public class ExceptionMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<ExceptionMiddleware> _logger;

        public ExceptionMiddleware(RequestDelegate next, ILogger<ExceptionMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            try
            {
                await _next(context); // Continue pipeline
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unhandled exception occurred.");
                await HandleExceptionAsync(context, ex);
            }
        }

        private static async Task HandleExceptionAsync(HttpContext context, Exception exception)
        {
            context.Response.ContentType = "application/json";
            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;

            var response = new
            {
                StatusCode = context.Response.StatusCode,
                Message = "An unexpected error occurred. Please try again later.",
                Details = exception.Message // remove in production if you don’t want to expose
            };

            var options = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
            var jsonResponse = JsonSerializer.Serialize(response, options);

            await context.Response.WriteAsync(jsonResponse);
        }
    }
}

namespace ShopTrackPro.API.Extensions
{
    public static class ExceptionMiddlewareExtensions
    {
        public static void UseGlobalExceptionHandler(this IApplicationBuilder app)
        {
            app.UseMiddleware<ShopTrackPro.API.Middleware.ExceptionMiddleware>();
        }
    }
}





